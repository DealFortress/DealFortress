import { Injectable } from '@angular/core';
import { Actions, createEffect } from '@ngrx/effects';
import { dispatchEvents, listeners, } from '@trellisorg/ngrx-data-websocket-core';
import { filter, map } from 'rxjs/operators';
import { SocketActionFactory } from '../actions/socket-action-factory';
import { SocketEventListenerCollectionService } from '../listeners/socket-event-listener-collection.service';
import { ofSocketType } from '../utils/of_socket_type';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../listeners/socket-event-listener-collection.service";
import * as i3 from "../actions/socket-action-factory";
export class SocketDispatcherEffects {
    constructor(_actions$, socketEventListenerCollectionService, socketActionFactory) {
        this._actions$ = _actions$;
        this.socketEventListenerCollectionService = socketEventListenerCollectionService;
        this.socketActionFactory = socketActionFactory;
        this.socketEventWithoutCrid$ = createEffect(() => this._actions$.pipe(ofSocketType(...listeners), filter((action) => !action.payload.correlationId), map((action) => this.socketActionFactory.convertToDataAction(action))));
        this.dispatchSocketEvent$ = createEffect(() => this._actions$.pipe(ofSocketType(...dispatchEvents), map((action) => action.payload), map((action) => {
            const listener = this.socketEventListenerCollectionService.get(action.entityName);
            if (listener) {
                listener.emit(action.socketOp, action.correlationId, action.data);
            }
            return;
        })), { dispatch: false });
    }
}
SocketDispatcherEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: SocketDispatcherEffects, deps: [{ token: i1.Actions }, { token: i2.SocketEventListenerCollectionService }, { token: i3.SocketActionFactory }], target: i0.ɵɵFactoryTarget.Injectable });
SocketDispatcherEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: SocketDispatcherEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: SocketDispatcherEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.SocketEventListenerCollectionService }, { type: i3.SocketActionFactory }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ja2V0LWRpc3BhdGNoZXItZWZmZWN0cy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvbmdyeC1kYXRhLXdlYnNvY2tldC9jbGllbnQvc3JjL2xpYi9lZmZlY3RzL3NvY2tldC1kaXNwYXRjaGVyLWVmZmVjdHMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RELE9BQU8sRUFDSCxjQUFjLEVBQ2QsU0FBUyxHQUdaLE1BQU0sc0NBQXNDLENBQUM7QUFDOUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN2RSxPQUFPLEVBQUUsb0NBQW9DLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUM3RyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7Ozs7O0FBR3ZELE1BQU0sT0FBTyx1QkFBdUI7SUFtQ2hDLFlBQ1ksU0FBa0IsRUFDbEIsb0NBQTBFLEVBQzFFLG1CQUF3QztRQUZ4QyxjQUFTLEdBQVQsU0FBUyxDQUFTO1FBQ2xCLHlDQUFvQyxHQUFwQyxvQ0FBb0MsQ0FBc0M7UUFDMUUsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQXJDcEQsNEJBQXVCLEdBQUcsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUN4QyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FDZixZQUFZLENBQUMsR0FBRyxTQUFTLENBQUMsRUFDMUIsTUFBTSxDQUFDLENBQUMsTUFBb0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxFQUMvRCxHQUFHLENBQUMsQ0FBQyxNQUFvQixFQUFFLEVBQUUsQ0FDekIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUN2RCxDQUNKLENBQ0osQ0FBQztRQUVGLHlCQUFvQixHQUFHLFlBQVksQ0FDL0IsR0FBRyxFQUFFLENBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQ2YsWUFBWSxDQUFDLEdBQUcsY0FBYyxDQUFDLEVBQy9CLEdBQUcsQ0FBQyxDQUFDLE1BQW9CLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFDN0MsR0FBRyxDQUFDLENBQUMsTUFBMkIsRUFBRSxFQUFFO1lBQ2hDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxvQ0FBb0MsQ0FBQyxHQUFHLENBQzFELE1BQU0sQ0FBQyxVQUFVLENBQ3BCLENBQUM7WUFFRixJQUFJLFFBQVEsRUFBRTtnQkFDVixRQUFRLENBQUMsSUFBSSxDQUNULE1BQU0sQ0FBQyxRQUFRLEVBQ2YsTUFBTSxDQUFDLGFBQWEsRUFDcEIsTUFBTSxDQUFDLElBQUksQ0FDZCxDQUFDO2FBQ0w7WUFFRCxPQUFPO1FBQ1gsQ0FBQyxDQUFDLENBQ0wsRUFDTCxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FDdEIsQ0FBQztJQU1DLENBQUM7O29IQXZDSyx1QkFBdUI7d0hBQXZCLHVCQUF1QjsyRkFBdkIsdUJBQXVCO2tCQURuQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aW9ucywgY3JlYXRlRWZmZWN0IH0gZnJvbSAnQG5ncngvZWZmZWN0cyc7XG5pbXBvcnQge1xuICAgIGRpc3BhdGNoRXZlbnRzLFxuICAgIGxpc3RlbmVycyxcbiAgICBTb2NrZXRBY3Rpb24sXG4gICAgU29ja2V0QWN0aW9uUGF5bG9hZCxcbn0gZnJvbSAnQHRyZWxsaXNvcmcvbmdyeC1kYXRhLXdlYnNvY2tldC1jb3JlJztcbmltcG9ydCB7IGZpbHRlciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU29ja2V0QWN0aW9uRmFjdG9yeSB9IGZyb20gJy4uL2FjdGlvbnMvc29ja2V0LWFjdGlvbi1mYWN0b3J5JztcbmltcG9ydCB7IFNvY2tldEV2ZW50TGlzdGVuZXJDb2xsZWN0aW9uU2VydmljZSB9IGZyb20gJy4uL2xpc3RlbmVycy9zb2NrZXQtZXZlbnQtbGlzdGVuZXItY29sbGVjdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IG9mU29ja2V0VHlwZSB9IGZyb20gJy4uL3V0aWxzL29mX3NvY2tldF90eXBlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNvY2tldERpc3BhdGNoZXJFZmZlY3RzIHtcbiAgICBzb2NrZXRFdmVudFdpdGhvdXRDcmlkJCA9IGNyZWF0ZUVmZmVjdCgoKSA9PlxuICAgICAgICB0aGlzLl9hY3Rpb25zJC5waXBlKFxuICAgICAgICAgICAgb2ZTb2NrZXRUeXBlKC4uLmxpc3RlbmVycyksXG4gICAgICAgICAgICBmaWx0ZXIoKGFjdGlvbjogU29ja2V0QWN0aW9uKSA9PiAhYWN0aW9uLnBheWxvYWQuY29ycmVsYXRpb25JZCksXG4gICAgICAgICAgICBtYXAoKGFjdGlvbjogU29ja2V0QWN0aW9uKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0QWN0aW9uRmFjdG9yeS5jb252ZXJ0VG9EYXRhQWN0aW9uKGFjdGlvbilcbiAgICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICk7XG5cbiAgICBkaXNwYXRjaFNvY2tldEV2ZW50JCA9IGNyZWF0ZUVmZmVjdChcbiAgICAgICAgKCkgPT5cbiAgICAgICAgICAgIHRoaXMuX2FjdGlvbnMkLnBpcGUoXG4gICAgICAgICAgICAgICAgb2ZTb2NrZXRUeXBlKC4uLmRpc3BhdGNoRXZlbnRzKSxcbiAgICAgICAgICAgICAgICBtYXAoKGFjdGlvbjogU29ja2V0QWN0aW9uKSA9PiBhY3Rpb24ucGF5bG9hZCksXG4gICAgICAgICAgICAgICAgbWFwKChhY3Rpb246IFNvY2tldEFjdGlvblBheWxvYWQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlzdGVuZXIgPSB0aGlzLnNvY2tldEV2ZW50TGlzdGVuZXJDb2xsZWN0aW9uU2VydmljZS5nZXQoXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24uZW50aXR5TmFtZVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIuZW1pdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24uc29ja2V0T3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLmNvcnJlbGF0aW9uSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLmRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICksXG4gICAgICAgIHsgZGlzcGF0Y2g6IGZhbHNlIH1cbiAgICApO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgX2FjdGlvbnMkOiBBY3Rpb25zLFxuICAgICAgICBwcml2YXRlIHNvY2tldEV2ZW50TGlzdGVuZXJDb2xsZWN0aW9uU2VydmljZTogU29ja2V0RXZlbnRMaXN0ZW5lckNvbGxlY3Rpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHNvY2tldEFjdGlvbkZhY3Rvcnk6IFNvY2tldEFjdGlvbkZhY3RvcnlcbiAgICApIHt9XG59XG4iXX0=