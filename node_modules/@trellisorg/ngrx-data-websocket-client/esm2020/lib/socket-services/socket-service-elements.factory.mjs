import { Inject, Injectable } from '@angular/core';
import { EntityDataService } from '@ngrx/data';
import { SocketDataServiceFactory } from '../data-services/socket-data-service-factory';
import { SocketDispatcherFactory } from '../dispatchers/socket-dispatcher-factory';
import { SocketEventListenerCollectionService } from '../listeners/socket-event-listener-collection.service';
import { SocketEventListenerFactory } from '../listeners/socket-event-listener-factory';
import { SocketSelectors$Factory, } from '../selectors/socket-selectors$';
import { NGRX_DATA_WEBSOCKET_CONFIG, } from '../utils/tokens';
import * as i0 from "@angular/core";
import * as i1 from "../dispatchers/socket-dispatcher-factory";
import * as i2 from "../listeners/socket-event-listener-factory";
import * as i3 from "../data-services/socket-data-service-factory";
import * as i4 from "@ngrx/data";
import * as i5 from "../listeners/socket-event-listener-collection.service";
import * as i6 from "../selectors/socket-selectors$";
export class SocketServiceElementsFactory {
    constructor(config, socketDispatcherFactory, socketEventListenerFactory, socketDataServiceFactory, entityDataService, socketEventListenerCollectionService, socketSelectors$Factory) {
        this.config = config;
        this.socketDispatcherFactory = socketDispatcherFactory;
        this.socketEventListenerFactory = socketEventListenerFactory;
        this.socketDataServiceFactory = socketDataServiceFactory;
        this.entityDataService = entityDataService;
        this.socketEventListenerCollectionService = socketEventListenerCollectionService;
        this.socketSelectors$Factory = socketSelectors$Factory;
    }
    create(entityName) {
        const dispatcher = this.socketDispatcherFactory.create(entityName);
        const listener = this.socketEventListenerFactory.create(entityName);
        const selectors$ = this.socketSelectors$Factory.create(entityName);
        this.socketEventListenerCollectionService.register(entityName, listener);
        const dataService = this.socketDataServiceFactory.create(entityName, dispatcher);
        this.entityDataService.registerService(entityName, dataService);
        return {
            listener,
            dispatcher,
            entityName,
            dataService,
            selectors$,
        };
    }
}
SocketServiceElementsFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: SocketServiceElementsFactory, deps: [{ token: NGRX_DATA_WEBSOCKET_CONFIG }, { token: i1.SocketDispatcherFactory }, { token: i2.SocketEventListenerFactory }, { token: i3.SocketDataServiceFactory }, { token: i4.EntityDataService }, { token: i5.SocketEventListenerCollectionService }, { token: i6.SocketSelectors$Factory }], target: i0.ɵɵFactoryTarget.Injectable });
SocketServiceElementsFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: SocketServiceElementsFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: SocketServiceElementsFactory, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [NGRX_DATA_WEBSOCKET_CONFIG]
                }] }, { type: i1.SocketDispatcherFactory }, { type: i2.SocketEventListenerFactory }, { type: i3.SocketDataServiceFactory }, { type: i4.EntityDataService }, { type: i5.SocketEventListenerCollectionService }, { type: i6.SocketSelectors$Factory }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ja2V0LXNlcnZpY2UtZWxlbWVudHMuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25ncngtZGF0YS13ZWJzb2NrZXQvY2xpZW50L3NyYy9saWIvc29ja2V0LXNlcnZpY2VzL3NvY2tldC1zZXJ2aWNlLWVsZW1lbnRzLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQy9DLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBR3hGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBRW5GLE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBQzdHLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQ3hGLE9BQU8sRUFFSCx1QkFBdUIsR0FDMUIsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN4QyxPQUFPLEVBRUgsMEJBQTBCLEdBQzdCLE1BQU0saUJBQWlCLENBQUM7Ozs7Ozs7O0FBV3pCLE1BQU0sT0FBTyw0QkFBNEI7SUFDckMsWUFFVyxNQUErQixFQUM5Qix1QkFBZ0QsRUFDaEQsMEJBQXNELEVBQ3RELHdCQUFrRCxFQUNsRCxpQkFBb0MsRUFDcEMsb0NBQTBFLEVBQzFFLHVCQUFtRDtRQU5wRCxXQUFNLEdBQU4sTUFBTSxDQUF5QjtRQUM5Qiw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO1FBQ2hELCtCQUEwQixHQUExQiwwQkFBMEIsQ0FBNEI7UUFDdEQsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtRQUNsRCxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3BDLHlDQUFvQyxHQUFwQyxvQ0FBb0MsQ0FBc0M7UUFDMUUsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUE0QjtJQUM1RCxDQUFDO0lBRUosTUFBTSxDQUFJLFVBQWtCO1FBQ3hCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUksVUFBVSxDQUFDLENBQUM7UUFFdEUsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixDQUFDLE1BQU0sQ0FBSSxVQUFVLENBQUMsQ0FBQztRQUV2RSxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFJLFVBQVUsQ0FBQyxDQUFDO1FBRXRFLElBQUksQ0FBQyxvQ0FBb0MsQ0FBQyxRQUFRLENBQzlDLFVBQVUsRUFDVixRQUFRLENBQ1gsQ0FBQztRQUVGLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxNQUFNLENBQ3BELFVBQVUsRUFDVixVQUFVLENBQ2IsQ0FBQztRQUVGLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRWhFLE9BQU87WUFDSCxRQUFRO1lBQ1IsVUFBVTtZQUNWLFVBQVU7WUFDVixXQUFXO1lBQ1gsVUFBVTtTQUNiLENBQUM7SUFDTixDQUFDOzt5SEF0Q1EsNEJBQTRCLGtCQUV6QiwwQkFBMEI7NkhBRjdCLDRCQUE0QjsyRkFBNUIsNEJBQTRCO2tCQUR4QyxVQUFVOzswQkFHRixNQUFNOzJCQUFDLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRW50aXR5RGF0YVNlcnZpY2UgfSBmcm9tICdAbmdyeC9kYXRhJztcbmltcG9ydCB7IFNvY2tldERhdGFTZXJ2aWNlRmFjdG9yeSB9IGZyb20gJy4uL2RhdGEtc2VydmljZXMvc29ja2V0LWRhdGEtc2VydmljZS1mYWN0b3J5JztcbmltcG9ydCB0eXBlIHsgU29ja2V0RGF0YVNlcnZpY2UgfSBmcm9tICcuLi9kYXRhLXNlcnZpY2VzL3NvY2tldC1kYXRhLnNlcnZpY2UnO1xuaW1wb3J0IHR5cGUgeyBTb2NrZXREaXNwYXRjaGVyQmFzZSB9IGZyb20gJy4uL2Rpc3BhdGNoZXJzL3NvY2tldC1kaXNwYXRjaGVyLWJhc2UnO1xuaW1wb3J0IHsgU29ja2V0RGlzcGF0Y2hlckZhY3RvcnkgfSBmcm9tICcuLi9kaXNwYXRjaGVycy9zb2NrZXQtZGlzcGF0Y2hlci1mYWN0b3J5JztcbmltcG9ydCB0eXBlIHsgU29ja2V0RXZlbnRMaXN0ZW5lciB9IGZyb20gJy4uL2xpc3RlbmVycy9zb2NrZXQtZXZlbnQtbGlzdGVuZXInO1xuaW1wb3J0IHsgU29ja2V0RXZlbnRMaXN0ZW5lckNvbGxlY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi4vbGlzdGVuZXJzL3NvY2tldC1ldmVudC1saXN0ZW5lci1jb2xsZWN0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgU29ja2V0RXZlbnRMaXN0ZW5lckZhY3RvcnkgfSBmcm9tICcuLi9saXN0ZW5lcnMvc29ja2V0LWV2ZW50LWxpc3RlbmVyLWZhY3RvcnknO1xuaW1wb3J0IHtcbiAgICBTb2NrZXRTZWxlY3RvcnMkLFxuICAgIFNvY2tldFNlbGVjdG9ycyRGYWN0b3J5LFxufSBmcm9tICcuLi9zZWxlY3RvcnMvc29ja2V0LXNlbGVjdG9ycyQnO1xuaW1wb3J0IHtcbiAgICBOZ3J4RGF0YVdlYnNvY2tldENvbmZpZyxcbiAgICBOR1JYX0RBVEFfV0VCU09DS0VUX0NPTkZJRyxcbn0gZnJvbSAnLi4vdXRpbHMvdG9rZW5zJztcblxuZXhwb3J0IGludGVyZmFjZSBTb2NrZXRTZXJ2aWNlRWxlbWVudHM8VD4ge1xuICAgIHJlYWRvbmx5IGRpc3BhdGNoZXI6IFNvY2tldERpc3BhdGNoZXJCYXNlPFQ+O1xuICAgIHJlYWRvbmx5IGxpc3RlbmVyOiBTb2NrZXRFdmVudExpc3RlbmVyPFQ+O1xuICAgIHJlYWRvbmx5IGRhdGFTZXJ2aWNlOiBTb2NrZXREYXRhU2VydmljZTxUPjtcbiAgICByZWFkb25seSBzZWxlY3RvcnMkOiBTb2NrZXRTZWxlY3RvcnMkPFQ+O1xuICAgIHJlYWRvbmx5IGVudGl0eU5hbWU6IHN0cmluZztcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNvY2tldFNlcnZpY2VFbGVtZW50c0ZhY3Rvcnk8VD4ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KE5HUlhfREFUQV9XRUJTT0NLRVRfQ09ORklHKVxuICAgICAgICBwdWJsaWMgY29uZmlnOiBOZ3J4RGF0YVdlYnNvY2tldENvbmZpZyxcbiAgICAgICAgcHJpdmF0ZSBzb2NrZXREaXNwYXRjaGVyRmFjdG9yeTogU29ja2V0RGlzcGF0Y2hlckZhY3RvcnksXG4gICAgICAgIHByaXZhdGUgc29ja2V0RXZlbnRMaXN0ZW5lckZhY3Rvcnk6IFNvY2tldEV2ZW50TGlzdGVuZXJGYWN0b3J5LFxuICAgICAgICBwcml2YXRlIHNvY2tldERhdGFTZXJ2aWNlRmFjdG9yeTogU29ja2V0RGF0YVNlcnZpY2VGYWN0b3J5LFxuICAgICAgICBwcml2YXRlIGVudGl0eURhdGFTZXJ2aWNlOiBFbnRpdHlEYXRhU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBzb2NrZXRFdmVudExpc3RlbmVyQ29sbGVjdGlvblNlcnZpY2U6IFNvY2tldEV2ZW50TGlzdGVuZXJDb2xsZWN0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBzb2NrZXRTZWxlY3RvcnMkRmFjdG9yeTogU29ja2V0U2VsZWN0b3JzJEZhY3Rvcnk8VD5cbiAgICApIHt9XG5cbiAgICBjcmVhdGU8VD4oZW50aXR5TmFtZTogc3RyaW5nKTogU29ja2V0U2VydmljZUVsZW1lbnRzPFQ+IHtcbiAgICAgICAgY29uc3QgZGlzcGF0Y2hlciA9IHRoaXMuc29ja2V0RGlzcGF0Y2hlckZhY3RvcnkuY3JlYXRlPFQ+KGVudGl0eU5hbWUpO1xuXG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gdGhpcy5zb2NrZXRFdmVudExpc3RlbmVyRmFjdG9yeS5jcmVhdGU8VD4oZW50aXR5TmFtZSk7XG5cbiAgICAgICAgY29uc3Qgc2VsZWN0b3JzJCA9IHRoaXMuc29ja2V0U2VsZWN0b3JzJEZhY3RvcnkuY3JlYXRlPFQ+KGVudGl0eU5hbWUpO1xuXG4gICAgICAgIHRoaXMuc29ja2V0RXZlbnRMaXN0ZW5lckNvbGxlY3Rpb25TZXJ2aWNlLnJlZ2lzdGVyPFQ+KFxuICAgICAgICAgICAgZW50aXR5TmFtZSxcbiAgICAgICAgICAgIGxpc3RlbmVyXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgZGF0YVNlcnZpY2UgPSB0aGlzLnNvY2tldERhdGFTZXJ2aWNlRmFjdG9yeS5jcmVhdGU8VD4oXG4gICAgICAgICAgICBlbnRpdHlOYW1lLFxuICAgICAgICAgICAgZGlzcGF0Y2hlclxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuZW50aXR5RGF0YVNlcnZpY2UucmVnaXN0ZXJTZXJ2aWNlKGVudGl0eU5hbWUsIGRhdGFTZXJ2aWNlKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGlzdGVuZXIsXG4gICAgICAgICAgICBkaXNwYXRjaGVyLFxuICAgICAgICAgICAgZW50aXR5TmFtZSxcbiAgICAgICAgICAgIGRhdGFTZXJ2aWNlLFxuICAgICAgICAgICAgc2VsZWN0b3JzJCxcbiAgICAgICAgfTtcbiAgICB9XG59XG4iXX0=