import { OP_ERROR, OP_SUCCESS, } from '@ngrx/data';
import { SocketOp, } from '@trellisorg/ngrx-data-websocket-core';
import { of, throwError } from 'rxjs';
import { filter, mergeMap, take, timeout } from 'rxjs/operators';
export class SocketDispatcherBase {
    constructor(entityName, correlationIdGenerator, socketActionFactory, reducedActions$, store, socketTimeout) {
        this.entityName = entityName;
        this.correlationIdGenerator = correlationIdGenerator;
        this.socketActionFactory = socketActionFactory;
        this.reducedActions$ = reducedActions$;
        this.store = store;
        this.socketTimeout = socketTimeout;
    }
    createSocketAction(socketOp, data, options) {
        return this.socketActionFactory.create(this.entityName, socketOp, data, options);
    }
    dispatch(action) {
        this.store.dispatch(action);
        return action;
    }
    add(entity) {
        return this.processEvent(SocketOp.SAVE_ADD_ONE, entity);
    }
    delete(id) {
        return this.processEvent(SocketOp.SAVE_DELETE_ONE, id);
    }
    getAll() {
        return this.processEvent(SocketOp.QUERY_ALL);
    }
    getById(id) {
        return this.processEvent(SocketOp.QUERY_BY_KEY, id);
    }
    getWithQuery(params) {
        return this.processEvent(SocketOp.QUERY_MANY, params);
    }
    update(update) {
        return this.processEvent(SocketOp.SAVE_UPDATE_ONE, update);
    }
    upsert(entity) {
        return this.processEvent(SocketOp.SAVE_UPSERT_ONE, entity);
    }
    processEvent(event, data) {
        const correlationId = this.correlationIdGenerator.next();
        const action = this.socketActionFactory.create(this.entityName, event, data, { correlationId });
        this.dispatch(action);
        return this.getResponseEventData$(correlationId);
    }
    getResponseEventData$(crid) {
        return this.reducedActions$.pipe(filter((act) => !!act.payload), filter((act) => {
            const { correlationId, entityName, socketOp } = act.payload;
            return (entityName === this.entityName &&
                correlationId === crid &&
                (socketOp.endsWith(OP_SUCCESS) ||
                    socketOp.endsWith(OP_ERROR)));
        }), timeout(this.socketTimeout), take(1), mergeMap((act) => {
            const { socketOp } = act.payload;
            return socketOp.endsWith(OP_SUCCESS)
                ? of(act.payload.data)
                : throwError(act.payload.data.error);
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,