import { Inject, Injectable } from '@angular/core';
import { CorrelationIdGenerator } from '@ngrx/data';
import { ScannedActionsSubject, Store } from '@ngrx/store';
import { Observable } from 'rxjs';
import { shareReplay } from 'rxjs/operators';
import { SocketActionFactory } from '../actions/socket-action-factory';
import { defaultNgrxDataWebsocketConfig, NGRX_DATA_WEBSOCKET_CONFIG, } from '../utils/tokens';
import { SocketDispatcherBase } from './socket-dispatcher-base';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/data";
import * as i2 from "../actions/socket-action-factory";
import * as i3 from "@ngrx/store";
import * as i4 from "rxjs";
export class SocketDispatcherFactory {
    constructor(scannedActions$, config, correlationIdGenerator, socketActionFactory, store) {
        this.config = config;
        this.correlationIdGenerator = correlationIdGenerator;
        this.socketActionFactory = socketActionFactory;
        this.store = store;
        this.reducedActions$ = scannedActions$.pipe(shareReplay(1));
        this.raSubscription = this.reducedActions$.subscribe();
    }
    create(entityName) {
        return new SocketDispatcherBase(entityName, this.correlationIdGenerator, this.socketActionFactory, this.reducedActions$, this.store, isNaN(this.config.timeout)
            ? defaultNgrxDataWebsocketConfig.timeout
            : this.config.timeout);
    }
    ngOnDestroy() {
        this.raSubscription.unsubscribe();
    }
}
SocketDispatcherFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: SocketDispatcherFactory, deps: [{ token: ScannedActionsSubject }, { token: NGRX_DATA_WEBSOCKET_CONFIG }, { token: i1.CorrelationIdGenerator }, { token: i2.SocketActionFactory }, { token: i3.Store }], target: i0.ɵɵFactoryTarget.Injectable });
SocketDispatcherFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: SocketDispatcherFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: SocketDispatcherFactory, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i4.Observable, decorators: [{
                    type: Inject,
                    args: [ScannedActionsSubject]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NGRX_DATA_WEBSOCKET_CONFIG]
                }] }, { type: i1.CorrelationIdGenerator }, { type: i2.SocketActionFactory }, { type: i3.Store }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ja2V0LWRpc3BhdGNoZXItZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL25ncngtZGF0YS13ZWJzb2NrZXQvY2xpZW50L3NyYy9saWIvZGlzcGF0Y2hlcnMvc29ja2V0LWRpc3BhdGNoZXItZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDcEQsT0FBTyxFQUFVLHFCQUFxQixFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNuRSxPQUFPLEVBQUUsVUFBVSxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUNoRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDdkUsT0FBTyxFQUNILDhCQUE4QixFQUU5QiwwQkFBMEIsR0FDN0IsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7Ozs7O0FBR2hFLE1BQU0sT0FBTyx1QkFBdUI7SUFRaEMsWUFDbUMsZUFBbUMsRUFFMUQsTUFBK0IsRUFDL0Isc0JBQThDLEVBQzlDLG1CQUF3QyxFQUN4QyxLQUFZO1FBSFosV0FBTSxHQUFOLE1BQU0sQ0FBeUI7UUFDL0IsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUM5Qyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQ3hDLFVBQUssR0FBTCxLQUFLLENBQU87UUFFcEIsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMzRCxDQUFDO0lBRUQsTUFBTSxDQUFJLFVBQWtCO1FBQ3hCLE9BQU8sSUFBSSxvQkFBb0IsQ0FDM0IsVUFBVSxFQUNWLElBQUksQ0FBQyxzQkFBc0IsRUFDM0IsSUFBSSxDQUFDLG1CQUFtQixFQUN4QixJQUFJLENBQUMsZUFBZSxFQUNwQixJQUFJLENBQUMsS0FBSyxFQUNWLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUN0QixDQUFDLENBQUMsOEJBQThCLENBQUMsT0FBTztZQUN4QyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQzVCLENBQUM7SUFDTixDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdEMsQ0FBQzs7b0hBbkNRLHVCQUF1QixrQkFTcEIscUJBQXFCLGFBQ3JCLDBCQUEwQjt3SEFWN0IsdUJBQXVCOzJGQUF2Qix1QkFBdUI7a0JBRG5DLFVBQVU7OzBCQVVGLE1BQU07MkJBQUMscUJBQXFCOzswQkFDNUIsTUFBTTsyQkFBQywwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29ycmVsYXRpb25JZEdlbmVyYXRvciB9IGZyb20gJ0BuZ3J4L2RhdGEnO1xuaW1wb3J0IHsgQWN0aW9uLCBTY2FubmVkQWN0aW9uc1N1YmplY3QsIFN0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzaGFyZVJlcGxheSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFNvY2tldEFjdGlvbkZhY3RvcnkgfSBmcm9tICcuLi9hY3Rpb25zL3NvY2tldC1hY3Rpb24tZmFjdG9yeSc7XG5pbXBvcnQge1xuICAgIGRlZmF1bHROZ3J4RGF0YVdlYnNvY2tldENvbmZpZyxcbiAgICBOZ3J4RGF0YVdlYnNvY2tldENvbmZpZyxcbiAgICBOR1JYX0RBVEFfV0VCU09DS0VUX0NPTkZJRyxcbn0gZnJvbSAnLi4vdXRpbHMvdG9rZW5zJztcbmltcG9ydCB7IFNvY2tldERpc3BhdGNoZXJCYXNlIH0gZnJvbSAnLi9zb2NrZXQtZGlzcGF0Y2hlci1iYXNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNvY2tldERpc3BhdGNoZXJGYWN0b3J5IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICAvKipcbiAgICAgKiBBY3Rpb25zIHNjYW5uZWQgYnkgdGhlIHN0b3JlIGFmdGVyIGl0IHByb2Nlc3NlZCB0aGVtIHdpdGggcmVkdWNlcnMuXG4gICAgICogQSByZXBsYXkgb2JzZXJ2YWJsZSBvZiB0aGUgbW9zdCByZWNlbnQgYWN0aW9uIHJlZHVjZWQgYnkgdGhlIHN0b3JlLlxuICAgICAqL1xuICAgIHJlZHVjZWRBY3Rpb25zJDogT2JzZXJ2YWJsZTxBY3Rpb24+O1xuICAgIHByaXZhdGUgcmFTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFNjYW5uZWRBY3Rpb25zU3ViamVjdCkgc2Nhbm5lZEFjdGlvbnMkOiBPYnNlcnZhYmxlPEFjdGlvbj4sXG4gICAgICAgIEBJbmplY3QoTkdSWF9EQVRBX1dFQlNPQ0tFVF9DT05GSUcpXG4gICAgICAgIHByaXZhdGUgY29uZmlnOiBOZ3J4RGF0YVdlYnNvY2tldENvbmZpZyxcbiAgICAgICAgcHJpdmF0ZSBjb3JyZWxhdGlvbklkR2VuZXJhdG9yOiBDb3JyZWxhdGlvbklkR2VuZXJhdG9yLFxuICAgICAgICBwcml2YXRlIHNvY2tldEFjdGlvbkZhY3Rvcnk6IFNvY2tldEFjdGlvbkZhY3RvcnksXG4gICAgICAgIHByaXZhdGUgc3RvcmU6IFN0b3JlXG4gICAgKSB7XG4gICAgICAgIHRoaXMucmVkdWNlZEFjdGlvbnMkID0gc2Nhbm5lZEFjdGlvbnMkLnBpcGUoc2hhcmVSZXBsYXkoMSkpO1xuICAgICAgICB0aGlzLnJhU3Vic2NyaXB0aW9uID0gdGhpcy5yZWR1Y2VkQWN0aW9ucyQuc3Vic2NyaWJlKCk7XG4gICAgfVxuXG4gICAgY3JlYXRlPFQ+KGVudGl0eU5hbWU6IHN0cmluZyk6IFNvY2tldERpc3BhdGNoZXJCYXNlPFQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBTb2NrZXREaXNwYXRjaGVyQmFzZShcbiAgICAgICAgICAgIGVudGl0eU5hbWUsXG4gICAgICAgICAgICB0aGlzLmNvcnJlbGF0aW9uSWRHZW5lcmF0b3IsXG4gICAgICAgICAgICB0aGlzLnNvY2tldEFjdGlvbkZhY3RvcnksXG4gICAgICAgICAgICB0aGlzLnJlZHVjZWRBY3Rpb25zJCxcbiAgICAgICAgICAgIHRoaXMuc3RvcmUsXG4gICAgICAgICAgICBpc05hTih0aGlzLmNvbmZpZy50aW1lb3V0KVxuICAgICAgICAgICAgICAgID8gZGVmYXVsdE5ncnhEYXRhV2Vic29ja2V0Q29uZmlnLnRpbWVvdXRcbiAgICAgICAgICAgICAgICA6IHRoaXMuY29uZmlnLnRpbWVvdXRcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5yYVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbn1cbiJdfQ==