import { listeners, SocketOp, } from '@trellisorg/ngrx-data-websocket-core';
import { BehaviorSubject } from 'rxjs';
import socketIo from 'socket.io-client';
export class SocketEventListener {
    constructor(entityName, socketActionFactory, store) {
        this.socketActionFactory = socketActionFactory;
        this.store = store;
        this._entityName = entityName;
    }
    setupReservedEvents() {
        [SocketOp.CONNECT_ERROR, SocketOp.RECONNECT_ERROR].forEach((event) => this._socket.on(event, (err) => this.store.dispatch(this.socketActionFactory.create(this._entityName, event, err))));
        [
            SocketOp.CONNECT_TIMEOUT,
            SocketOp.RECONNECT_ATTEMPT,
            SocketOp.RECONNECT_FAILED,
        ].forEach((event) => this._socket.on(event, (attempts) => this.store.dispatch(this.socketActionFactory.create(this._entityName, event, attempts))));
        [SocketOp.RECONNECT, SocketOp.RECONNECTING].forEach((event) => this._socket.on(event, () => this.store.dispatch(this.socketActionFactory.create(this._entityName, event))));
    }
    emit(event, crid, data) {
        this._socket.emit(event, {
            correlationId: crid,
            data,
        });
    }
    disconnect() {
        this._socket.disconnect();
    }
    connect(config, params) {
        const connected = new BehaviorSubject(false);
        const host = config.host ? `${config.host}/` : '';
        const connectParams = new URLSearchParams(params).toString();
        this._socket = socketIo(`${host}${this._entityName.toLowerCase()}?${connectParams}`, {
            transports: ['websocket', 'polling'],
        });
        this.setupReservedEvents();
        this._socket.on('connect', () => {
            this.store.dispatch(this.socketActionFactory.create(this._entityName, SocketOp.CONNECT));
            connected.next(true);
            connected.complete();
        });
        listeners.forEach((event) => {
            this._socket.on(event, (response) => {
                const { correlationId, data } = response;
                this.store.dispatch(this.socketActionFactory.create(this._entityName, event, data, {
                    correlationId,
                }));
            });
        });
        return connected.asObservable();
    }
}
//# sourceMappingURL=data:application/json;base64,