import type { EntityCollectionDataService, QueryParams } from '@ngrx/data';
import type { UpdateStr } from '@ngrx/entity/src/models';
import type { Observable } from 'rxjs';
import type { SocketDispatcherBase } from '../dispatchers/socket-dispatcher-base';
export declare class SocketDataService<T> implements EntityCollectionDataService<T> {
    private entityName;
    private socketDispatcher;
    readonly name: string;
    constructor(entityName: string, socketDispatcher: SocketDispatcherBase<T>);
    add(entity: T): Observable<T>;
    delete(id: number | string): Observable<number | string>;
    getAll(): Observable<T[]>;
    getById(id: number | string): Observable<T>;
    getWithQuery(params: QueryParams | string): Observable<T[]>;
    update(update: UpdateStr<T>): Observable<T>;
    upsert(entity: T): Observable<T>;
}
