import { EntityDataService } from '@ngrx/data';
import { SocketDataServiceFactory } from '../data-services/socket-data-service-factory';
import type { SocketDataService } from '../data-services/socket-data.service';
import type { SocketDispatcherBase } from '../dispatchers/socket-dispatcher-base';
import { SocketDispatcherFactory } from '../dispatchers/socket-dispatcher-factory';
import type { SocketEventListener } from '../listeners/socket-event-listener';
import { SocketEventListenerCollectionService } from '../listeners/socket-event-listener-collection.service';
import { SocketEventListenerFactory } from '../listeners/socket-event-listener-factory';
import { SocketSelectors$, SocketSelectors$Factory } from '../selectors/socket-selectors$';
import { NgrxDataWebsocketConfig } from '../utils/tokens';
import * as i0 from "@angular/core";
export interface SocketServiceElements<T> {
    readonly dispatcher: SocketDispatcherBase<T>;
    readonly listener: SocketEventListener<T>;
    readonly dataService: SocketDataService<T>;
    readonly selectors$: SocketSelectors$<T>;
    readonly entityName: string;
}
export declare class SocketServiceElementsFactory<T> {
    config: NgrxDataWebsocketConfig;
    private socketDispatcherFactory;
    private socketEventListenerFactory;
    private socketDataServiceFactory;
    private entityDataService;
    private socketEventListenerCollectionService;
    private socketSelectors$Factory;
    constructor(config: NgrxDataWebsocketConfig, socketDispatcherFactory: SocketDispatcherFactory, socketEventListenerFactory: SocketEventListenerFactory, socketDataServiceFactory: SocketDataServiceFactory, entityDataService: EntityDataService, socketEventListenerCollectionService: SocketEventListenerCollectionService, socketSelectors$Factory: SocketSelectors$Factory<T>);
    create<T>(entityName: string): SocketServiceElements<T>;
    static ɵfac: i0.ɵɵFactoryDeclaration<SocketServiceElementsFactory<any>, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<SocketServiceElementsFactory<any>>;
}
