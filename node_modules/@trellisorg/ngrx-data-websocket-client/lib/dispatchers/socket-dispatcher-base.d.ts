import { CorrelationIdGenerator, QueryParams } from '@ngrx/data';
import type { UpdateStr } from '@ngrx/entity/src/models';
import type { Action, Store } from '@ngrx/store';
import { SocketAction, SocketActionOptions, SocketOp } from '@trellisorg/ngrx-data-websocket-core';
import { Observable } from 'rxjs';
import type { SocketActionFactory } from '../actions/socket-action-factory';
export declare class SocketDispatcherBase<T> {
    private entityName;
    private correlationIdGenerator;
    private socketActionFactory;
    private reducedActions$;
    private store;
    private socketTimeout;
    constructor(entityName: string, correlationIdGenerator: CorrelationIdGenerator, socketActionFactory: SocketActionFactory, reducedActions$: Observable<Action>, store: Store, socketTimeout: number);
    createSocketAction<P = any>(socketOp: SocketOp, data?: P, options?: SocketActionOptions): SocketAction<P>;
    private dispatch;
    add(entity: T): Observable<T>;
    delete(id: number | string): Observable<number | string>;
    getAll(): Observable<T[]>;
    getById(id: number | string): Observable<T>;
    getWithQuery(params: QueryParams | string): Observable<T[]>;
    update(update: UpdateStr<T>): Observable<T>;
    upsert(entity: T): Observable<T>;
    private processEvent;
    private getResponseEventData$;
}
