import { OnDestroy } from '@angular/core';
import { CorrelationIdGenerator } from '@ngrx/data';
import { Action, Store } from '@ngrx/store';
import { Observable } from 'rxjs';
import { SocketActionFactory } from '../actions/socket-action-factory';
import { NgrxDataWebsocketConfig } from '../utils/tokens';
import { SocketDispatcherBase } from './socket-dispatcher-base';
import * as i0 from "@angular/core";
export declare class SocketDispatcherFactory implements OnDestroy {
    private config;
    private correlationIdGenerator;
    private socketActionFactory;
    private store;
    /**
     * Actions scanned by the store after it processed them with reducers.
     * A replay observable of the most recent action reduced by the store.
     */
    reducedActions$: Observable<Action>;
    private raSubscription;
    constructor(scannedActions$: Observable<Action>, config: NgrxDataWebsocketConfig, correlationIdGenerator: CorrelationIdGenerator, socketActionFactory: SocketActionFactory, store: Store);
    create<T>(entityName: string): SocketDispatcherBase<T>;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SocketDispatcherFactory, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<SocketDispatcherFactory>;
}
