{"version":3,"file":"trellisorg-ngrx-data-websocket-client.mjs","sources":["../../../../../packages/ngrx-data-websocket/client/src/lib/utils/create-action-type.ts","../../../../../packages/ngrx-data-websocket/client/src/lib/actions/socket-action-factory.ts","../../../../../packages/ngrx-data-websocket/client/src/lib/data-services/socket-data.service.ts","../../../../../packages/ngrx-data-websocket/client/src/lib/data-services/socket-data-service-factory.ts","../../../../../packages/ngrx-data-websocket/client/src/lib/utils/tokens.ts","../../../../../packages/ngrx-data-websocket/client/src/lib/dispatchers/socket-dispatcher-base.ts","../../../../../packages/ngrx-data-websocket/client/src/lib/dispatchers/socket-dispatcher-factory.ts","../../../../../packages/ngrx-data-websocket/client/src/lib/utils/of_socket_type.ts","../../../../../packages/ngrx-data-websocket/client/src/lib/listeners/socket-event-listener-collection.service.ts","../../../../../packages/ngrx-data-websocket/client/src/lib/effects/socket-dispatcher-effects.service.ts","../../../../../packages/ngrx-data-websocket/client/src/lib/listeners/socket-event-listener.ts","../../../../../packages/ngrx-data-websocket/client/src/lib/listeners/socket-event-listener-factory.ts","../../../../../packages/ngrx-data-websocket/client/src/lib/selectors/socket-selectors$.ts","../../../../../packages/ngrx-data-websocket/client/src/lib/socket-services/socket-service-elements.factory.ts","../../../../../packages/ngrx-data-websocket/client/src/lib/ngrx-data-websocket-client.module.ts","../../../../../packages/ngrx-data-websocket/client/src/lib/socket-services/socket-collection-service-base.ts","../../../../../packages/ngrx-data-websocket/client/src/trellisorg-ngrx-data-websocket-client.ts"],"sourcesContent":["import type { SocketOp } from '@trellisorg/ngrx-data-websocket-core';\n\nexport function createActionType(entityName: string, op: SocketOp): string {\n    return `[${entityName}] ${op}`;\n}\n","import { Injectable } from '@angular/core';\nimport { EntityAction, EntityActionFactory, EntityOp } from '@ngrx/data';\nimport type {\n    SocketAction,\n    SocketActionOptions,\n    SocketOp,\n} from '@trellisorg/ngrx-data-websocket-core';\nimport { createActionType } from '../utils/create-action-type';\n\n@Injectable()\nexport class SocketActionFactory {\n    constructor(private entityActionFactory: EntityActionFactory) {}\n\n    create<P = any>(\n        entityName: string,\n        socketOp: SocketOp,\n        data?: P,\n        options?: SocketActionOptions\n    ): SocketAction {\n        return {\n            type: createActionType(entityName, socketOp),\n            payload: {\n                entityName,\n                socketOp,\n                data,\n                ...options,\n            },\n        };\n    }\n\n    convertToDataAction<P = any>(\n        socketAction: SocketAction<P>\n    ): EntityAction<P> {\n        return this.entityActionFactory.create(\n            socketAction.payload.entityName,\n            socketAction.payload.socketOp.replace(\n                'ngrx-data-websocket',\n                '@ngrx/data'\n            ) as EntityOp,\n            socketAction.payload.data\n        );\n    }\n}\n","import type { EntityCollectionDataService, QueryParams } from '@ngrx/data';\nimport type { UpdateStr } from '@ngrx/entity/src/models';\nimport type { Observable } from 'rxjs';\nimport type { SocketDispatcherBase } from '../dispatchers/socket-dispatcher-base';\n\nexport class SocketDataService<T> implements EntityCollectionDataService<T> {\n    readonly name: string;\n\n    constructor(\n        private entityName: string,\n        private socketDispatcher: SocketDispatcherBase<T>\n    ) {}\n\n    add(entity: T): Observable<T> {\n        return this.socketDispatcher.add(entity);\n    }\n\n    delete(id: number | string): Observable<number | string> {\n        return this.socketDispatcher.delete(id);\n    }\n\n    getAll(): Observable<T[]> {\n        return this.socketDispatcher.getAll();\n    }\n\n    getById(id: number | string): Observable<T> {\n        return this.socketDispatcher.getById(id);\n    }\n\n    getWithQuery(params: QueryParams | string): Observable<T[]> {\n        return this.socketDispatcher.getWithQuery(params);\n    }\n\n    update(update: UpdateStr<T>): Observable<T> {\n        return this.socketDispatcher.update(update);\n    }\n\n    upsert(entity: T): Observable<T> {\n        return this.socketDispatcher.upsert(entity);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport type { SocketDispatcherBase } from '../dispatchers/socket-dispatcher-base';\nimport { SocketDataService } from './socket-data.service';\n\n@Injectable()\nexport class SocketDataServiceFactory {\n    create<T>(\n        entityName: string,\n        dispatcher: SocketDispatcherBase<T>\n    ): SocketDataService<T> {\n        return new SocketDataService<T>(entityName, dispatcher);\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport interface NgrxDataWebsocketConfig {\n    timeout: number;\n    host: string;\n}\n\nexport const defaultNgrxDataWebsocketConfig: NgrxDataWebsocketConfig = {\n    timeout: 5000,\n    host: '',\n};\n\nexport const NGRX_DATA_WEBSOCKET_CONFIG = new InjectionToken<NgrxDataWebsocketConfig>(\n    'ngrx-websocket-config'\n);\n","import {\n    CorrelationIdGenerator,\n    OP_ERROR,\n    OP_SUCCESS,\n    QueryParams,\n} from '@ngrx/data';\nimport type { UpdateStr } from '@ngrx/entity/src/models';\nimport type { Action, Store } from '@ngrx/store';\nimport {\n    SocketAction,\n    SocketActionOptions,\n    SocketOp,\n} from '@trellisorg/ngrx-data-websocket-core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { filter, mergeMap, take, timeout } from 'rxjs/operators';\nimport type { SocketActionFactory } from '../actions/socket-action-factory';\n\nexport class SocketDispatcherBase<T> {\n    constructor(\n        private entityName: string,\n        private correlationIdGenerator: CorrelationIdGenerator,\n        private socketActionFactory: SocketActionFactory,\n        private reducedActions$: Observable<Action>,\n        private store: Store,\n        private socketTimeout: number\n    ) {}\n\n    createSocketAction<P = any>(\n        socketOp: SocketOp,\n        data?: P,\n        options?: SocketActionOptions\n    ): SocketAction<P> {\n        return this.socketActionFactory.create(\n            this.entityName,\n            socketOp,\n            data,\n            options\n        );\n    }\n\n    private dispatch(action: Action): Action {\n        this.store.dispatch(action);\n        return action;\n    }\n\n    add(entity: T): Observable<T> {\n        return this.processEvent(SocketOp.SAVE_ADD_ONE, entity);\n    }\n\n    delete(id: number | string): Observable<number | string> {\n        return this.processEvent<number | string, number | string>(\n            SocketOp.SAVE_DELETE_ONE,\n            id\n        );\n    }\n\n    getAll(): Observable<T[]> {\n        return this.processEvent<null, T[]>(SocketOp.QUERY_ALL);\n    }\n\n    getById(id: number | string): Observable<T> {\n        return this.processEvent<number | string, T>(SocketOp.QUERY_BY_KEY, id);\n    }\n\n    getWithQuery(params: QueryParams | string): Observable<T[]> {\n        return this.processEvent<QueryParams | string, T[]>(\n            SocketOp.QUERY_MANY,\n            params\n        );\n    }\n\n    update(update: UpdateStr<T>): Observable<T> {\n        return this.processEvent<UpdateStr<T>, T>(\n            SocketOp.SAVE_UPDATE_ONE,\n            update\n        );\n    }\n\n    upsert(entity: T): Observable<T> {\n        return this.processEvent<T, T>(SocketOp.SAVE_UPSERT_ONE, entity);\n    }\n\n    private processEvent<P, K>(event: SocketOp, data?: P): Observable<K> {\n        const correlationId = this.correlationIdGenerator.next();\n\n        const action = this.socketActionFactory.create<P>(\n            this.entityName,\n            event,\n            data,\n            { correlationId }\n        );\n\n        this.dispatch(action);\n\n        return this.getResponseEventData$<K>(correlationId);\n    }\n\n    private getResponseEventData$<D = any>(crid: string): Observable<D> {\n        return this.reducedActions$.pipe(\n            filter((act: any) => !!act.payload),\n            filter((act: SocketAction) => {\n                const { correlationId, entityName, socketOp } = act.payload;\n                return (\n                    entityName === this.entityName &&\n                    correlationId === crid &&\n                    (socketOp.endsWith(OP_SUCCESS) ||\n                        socketOp.endsWith(OP_ERROR))\n                );\n            }),\n            timeout(this.socketTimeout),\n            take(1),\n            mergeMap((act) => {\n                const { socketOp } = act.payload;\n                return socketOp.endsWith(OP_SUCCESS)\n                    ? of(act.payload.data as D)\n                    : throwError(act.payload.data.error);\n            })\n        );\n    }\n}\n","import { Inject, Injectable, OnDestroy } from '@angular/core';\nimport { CorrelationIdGenerator } from '@ngrx/data';\nimport { Action, ScannedActionsSubject, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\nimport { SocketActionFactory } from '../actions/socket-action-factory';\nimport {\n    defaultNgrxDataWebsocketConfig,\n    NgrxDataWebsocketConfig,\n    NGRX_DATA_WEBSOCKET_CONFIG,\n} from '../utils/tokens';\nimport { SocketDispatcherBase } from './socket-dispatcher-base';\n\n@Injectable()\nexport class SocketDispatcherFactory implements OnDestroy {\n    /**\n     * Actions scanned by the store after it processed them with reducers.\n     * A replay observable of the most recent action reduced by the store.\n     */\n    reducedActions$: Observable<Action>;\n    private raSubscription: Subscription;\n\n    constructor(\n        @Inject(ScannedActionsSubject) scannedActions$: Observable<Action>,\n        @Inject(NGRX_DATA_WEBSOCKET_CONFIG)\n        private config: NgrxDataWebsocketConfig,\n        private correlationIdGenerator: CorrelationIdGenerator,\n        private socketActionFactory: SocketActionFactory,\n        private store: Store\n    ) {\n        this.reducedActions$ = scannedActions$.pipe(shareReplay(1));\n        this.raSubscription = this.reducedActions$.subscribe();\n    }\n\n    create<T>(entityName: string): SocketDispatcherBase<T> {\n        return new SocketDispatcherBase(\n            entityName,\n            this.correlationIdGenerator,\n            this.socketActionFactory,\n            this.reducedActions$,\n            this.store,\n            isNaN(this.config.timeout)\n                ? defaultNgrxDataWebsocketConfig.timeout\n                : this.config.timeout\n        );\n    }\n\n    ngOnDestroy() {\n        this.raSubscription.unsubscribe();\n    }\n}\n","import {\n    ROOT_ACTION_VALUE,\n    SocketAction,\n    SocketOp,\n} from '@trellisorg/ngrx-data-websocket-core';\nimport type { OperatorFunction } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nexport function ofSocketType<V extends SocketAction>(\n    ...allowedActions: Array<SocketOp>\n): OperatorFunction<SocketAction, SocketAction> {\n    return filter((action: SocketAction) =>\n        allowedActions.some((socketOp) => {\n            return action.type.includes(ROOT_ACTION_VALUE);\n        })\n    );\n}\n","import { Injectable } from '@angular/core';\nimport type { SocketEventListener } from './socket-event-listener';\n\n@Injectable()\nexport class SocketEventListenerCollectionService {\n    private readonly listeners: Map<string, SocketEventListener<any>>;\n\n    constructor() {\n        this.listeners = new Map<string, SocketEventListener<any>>();\n    }\n\n    register<T>(entityName: string, listener: SocketEventListener<T>): void {\n        this.listeners.set(entityName, listener);\n    }\n\n    get<T>(entityName: string): SocketEventListener<T> | null {\n        return this.listeners.get(entityName);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect } from '@ngrx/effects';\nimport {\n    dispatchEvents,\n    listeners,\n    SocketAction,\n    SocketActionPayload,\n} from '@trellisorg/ngrx-data-websocket-core';\nimport { filter, map } from 'rxjs/operators';\nimport { SocketActionFactory } from '../actions/socket-action-factory';\nimport { SocketEventListenerCollectionService } from '../listeners/socket-event-listener-collection.service';\nimport { ofSocketType } from '../utils/of_socket_type';\n\n@Injectable()\nexport class SocketDispatcherEffects {\n    socketEventWithoutCrid$ = createEffect(() =>\n        this._actions$.pipe(\n            ofSocketType(...listeners),\n            filter((action: SocketAction) => !action.payload.correlationId),\n            map((action: SocketAction) =>\n                this.socketActionFactory.convertToDataAction(action)\n            )\n        )\n    );\n\n    dispatchSocketEvent$ = createEffect(\n        () =>\n            this._actions$.pipe(\n                ofSocketType(...dispatchEvents),\n                map((action: SocketAction) => action.payload),\n                map((action: SocketActionPayload) => {\n                    const listener = this.socketEventListenerCollectionService.get(\n                        action.entityName\n                    );\n\n                    if (listener) {\n                        listener.emit(\n                            action.socketOp,\n                            action.correlationId,\n                            action.data\n                        );\n                    }\n\n                    return;\n                })\n            ),\n        { dispatch: false }\n    );\n\n    constructor(\n        private _actions$: Actions,\n        private socketEventListenerCollectionService: SocketEventListenerCollectionService,\n        private socketActionFactory: SocketActionFactory\n    ) {}\n}\n","import type { Store } from '@ngrx/store';\nimport {\n    listeners,\n    SocketActionPayload,\n    SocketOp,\n} from '@trellisorg/ngrx-data-websocket-core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport socketIo from 'socket.io-client';\nimport type { SocketActionFactory } from '../actions/socket-action-factory';\nimport type { NgrxDataWebsocketConfig } from '../utils/tokens';\n\nexport class SocketEventListener<T> {\n    private _socket: any;\n\n    private readonly _entityName: string;\n\n    constructor(\n        entityName: string,\n        private socketActionFactory: SocketActionFactory,\n        private store: Store\n    ) {\n        this._entityName = entityName;\n    }\n\n    setupReservedEvents(): void {\n        [SocketOp.CONNECT_ERROR, SocketOp.RECONNECT_ERROR].forEach((event) =>\n            this._socket.on(event, (err) =>\n                this.store.dispatch(\n                    this.socketActionFactory.create<Error>(\n                        this._entityName,\n                        event,\n                        err\n                    )\n                )\n            )\n        );\n\n        [\n            SocketOp.CONNECT_TIMEOUT,\n            SocketOp.RECONNECT_ATTEMPT,\n            SocketOp.RECONNECT_FAILED,\n        ].forEach((event) =>\n            this._socket.on(event, (attempts) =>\n                this.store.dispatch(\n                    this.socketActionFactory.create<number>(\n                        this._entityName,\n                        event,\n                        attempts\n                    )\n                )\n            )\n        );\n\n        [SocketOp.RECONNECT, SocketOp.RECONNECTING].forEach((event) =>\n            this._socket.on(event, () =>\n                this.store.dispatch(\n                    this.socketActionFactory.create<void>(\n                        this._entityName,\n                        event\n                    )\n                )\n            )\n        );\n    }\n\n    emit(event: SocketOp, crid: string, data: any): void {\n        this._socket.emit(event, {\n            correlationId: crid,\n            data,\n        });\n    }\n\n    disconnect(): void {\n        this._socket.disconnect();\n    }\n\n    connect(\n        config: NgrxDataWebsocketConfig,\n        params: Record<string, string>\n    ): Observable<boolean> {\n        const connected = new BehaviorSubject<boolean>(false);\n        const host = config.host ? `${config.host}/` : '';\n\n        const connectParams = new URLSearchParams(params).toString();\n\n        this._socket = socketIo(\n            `${host}${this._entityName.toLowerCase()}?${connectParams}`,\n            {\n                transports: ['websocket', 'polling'],\n            }\n        );\n\n        this.setupReservedEvents();\n\n        this._socket.on('connect', () => {\n            this.store.dispatch(\n                this.socketActionFactory.create<void>(\n                    this._entityName,\n                    SocketOp.CONNECT\n                )\n            );\n            connected.next(true);\n            connected.complete();\n        });\n\n        listeners.forEach((event) => {\n            this._socket.on(\n                event,\n                (\n                    response: Pick<\n                        SocketActionPayload,\n                        'data' | 'correlationId'\n                    >\n                ) => {\n                    const { correlationId, data } = response;\n                    this.store.dispatch(\n                        this.socketActionFactory.create(\n                            this._entityName,\n                            event,\n                            data,\n                            {\n                                correlationId,\n                            }\n                        )\n                    );\n                }\n            );\n        });\n\n        return connected.asObservable();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { SocketActionFactory } from '../actions/socket-action-factory';\nimport { SocketEventListener } from './socket-event-listener';\n\n@Injectable()\nexport class SocketEventListenerFactory {\n    constructor(\n        private socketActionFactory: SocketActionFactory,\n        private store: Store\n    ) {}\n\n    create<T>(entityName: string): SocketEventListener<T> {\n        return new SocketEventListener(\n            entityName,\n            this.socketActionFactory,\n            this.store\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport {\n    reservedEvents,\n    SocketAction,\n    SocketOp,\n} from '@trellisorg/ngrx-data-websocket-core';\nimport { merge, Observable } from 'rxjs';\nimport { map, shareReplay, startWith } from 'rxjs/operators';\nimport { createActionType } from '../utils/create-action-type';\n\nexport interface SocketSelectors$<T> {\n    readonly connected$: Observable<boolean>;\n\n    readonly connecting$: Observable<boolean>;\n}\n\n@Injectable()\nexport class SocketSelectors$Factory<T> {\n    constructor(private store: Store, private actions: Actions<SocketAction>) {}\n\n    create<T>(entityName: string): SocketSelectors$<T> {\n        // This will filter actions by only the socket.io reserved events\n        const reservedActions$ = this.actions.pipe(\n            ofType(\n                ...reservedEvents.map((event) =>\n                    createActionType(entityName, event)\n                )\n            )\n        );\n\n        // Defaults to true since sockets try to connect right away\n        const connectingOrReconnecting: Observable<boolean> = reservedActions$.pipe(\n            ofType(createActionType(entityName, SocketOp.RECONNECTING)),\n            map(() => true),\n            startWith(true),\n            shareReplay(1)\n        );\n\n        const connectFailed: Observable<boolean> = reservedActions$.pipe(\n            ofType(\n                ...[\n                    SocketOp.CONNECT_ERROR,\n                    SocketOp.CONNECT_TIMEOUT,\n                    SocketOp.RECONNECT_ERROR,\n                    SocketOp.RECONNECT_FAILED,\n                ].map((op) => createActionType(entityName, op))\n            ),\n            map(() => true),\n            shareReplay(1)\n        );\n\n        const connectOrReconnect: Observable<boolean> = reservedActions$.pipe(\n            ofType(\n                ...[SocketOp.CONNECT, SocketOp.RECONNECT].map((op) =>\n                    createActionType(entityName, op)\n                )\n            ),\n            map(() => true),\n            shareReplay(1)\n        );\n\n        /**\n         * Socket is connected if:\n         * CONNECT or RECONNECT has been emitted\n         * but not if ERROR or TIMEOUT events emitted\n         * and if the socket is not currently connecting\n         */\n        const connected$: Observable<boolean> = merge(\n            connectOrReconnect,\n            connectFailed.pipe(map((val) => !val)),\n            connectingOrReconnecting.pipe(map((val) => !val))\n        );\n\n        /**\n         * Currently connecting if initial value is used or RECONNECTING event is emitted\n         * but not if it has failed or a CONNECT or RECONNECT event has been emitted\n         */\n        const connecting$: Observable<boolean> = merge(\n            connectingOrReconnecting,\n            connectFailed.pipe(map((val) => !val)),\n            connectOrReconnect.pipe(map((val) => !val))\n        );\n\n        return {\n            connected$,\n            connecting$,\n        };\n    }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { EntityDataService } from '@ngrx/data';\nimport { SocketDataServiceFactory } from '../data-services/socket-data-service-factory';\nimport type { SocketDataService } from '../data-services/socket-data.service';\nimport type { SocketDispatcherBase } from '../dispatchers/socket-dispatcher-base';\nimport { SocketDispatcherFactory } from '../dispatchers/socket-dispatcher-factory';\nimport type { SocketEventListener } from '../listeners/socket-event-listener';\nimport { SocketEventListenerCollectionService } from '../listeners/socket-event-listener-collection.service';\nimport { SocketEventListenerFactory } from '../listeners/socket-event-listener-factory';\nimport {\n    SocketSelectors$,\n    SocketSelectors$Factory,\n} from '../selectors/socket-selectors$';\nimport {\n    NgrxDataWebsocketConfig,\n    NGRX_DATA_WEBSOCKET_CONFIG,\n} from '../utils/tokens';\n\nexport interface SocketServiceElements<T> {\n    readonly dispatcher: SocketDispatcherBase<T>;\n    readonly listener: SocketEventListener<T>;\n    readonly dataService: SocketDataService<T>;\n    readonly selectors$: SocketSelectors$<T>;\n    readonly entityName: string;\n}\n\n@Injectable()\nexport class SocketServiceElementsFactory<T> {\n    constructor(\n        @Inject(NGRX_DATA_WEBSOCKET_CONFIG)\n        public config: NgrxDataWebsocketConfig,\n        private socketDispatcherFactory: SocketDispatcherFactory,\n        private socketEventListenerFactory: SocketEventListenerFactory,\n        private socketDataServiceFactory: SocketDataServiceFactory,\n        private entityDataService: EntityDataService,\n        private socketEventListenerCollectionService: SocketEventListenerCollectionService,\n        private socketSelectors$Factory: SocketSelectors$Factory<T>\n    ) {}\n\n    create<T>(entityName: string): SocketServiceElements<T> {\n        const dispatcher = this.socketDispatcherFactory.create<T>(entityName);\n\n        const listener = this.socketEventListenerFactory.create<T>(entityName);\n\n        const selectors$ = this.socketSelectors$Factory.create<T>(entityName);\n\n        this.socketEventListenerCollectionService.register<T>(\n            entityName,\n            listener\n        );\n\n        const dataService = this.socketDataServiceFactory.create<T>(\n            entityName,\n            dispatcher\n        );\n\n        this.entityDataService.registerService(entityName, dataService);\n\n        return {\n            listener,\n            dispatcher,\n            entityName,\n            dataService,\n            selectors$,\n        };\n    }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { EffectsModule, EffectSources } from '@ngrx/effects';\nimport { SocketActionFactory } from './actions/socket-action-factory';\nimport { SocketDataServiceFactory } from './data-services/socket-data-service-factory';\nimport { SocketDispatcherFactory } from './dispatchers/socket-dispatcher-factory';\nimport { SocketDispatcherEffects } from './effects/socket-dispatcher-effects.service';\nimport { SocketEventListenerCollectionService } from './listeners/socket-event-listener-collection.service';\nimport { SocketEventListenerFactory } from './listeners/socket-event-listener-factory';\nimport { SocketSelectors$Factory } from './selectors/socket-selectors$';\nimport { SocketServiceElementsFactory } from './socket-services/socket-service-elements.factory';\nimport {\n    defaultNgrxDataWebsocketConfig,\n    NgrxDataWebsocketConfig,\n    NGRX_DATA_WEBSOCKET_CONFIG,\n} from './utils/tokens';\n\n@NgModule({\n    imports: [EffectsModule],\n    providers: [\n        SocketServiceElementsFactory,\n        SocketDispatcherFactory,\n        SocketActionFactory,\n        SocketDataServiceFactory,\n        SocketEventListenerFactory,\n        SocketEventListenerCollectionService,\n        SocketDispatcherEffects,\n        SocketSelectors$Factory,\n    ],\n})\nexport class NgrxDataWebsocketClientModule {\n    constructor(\n        private effectsSources: EffectSources,\n        private socketDispatcherEffects: SocketDispatcherEffects\n    ) {\n        this.effectsSources.addEffects(socketDispatcherEffects);\n    }\n\n    static forRoot(\n        config?: Partial<NgrxDataWebsocketConfig>\n    ): ModuleWithProviders<NgrxDataWebsocketClientModule> {\n        return {\n            ngModule: NgrxDataWebsocketClientModule,\n            providers: [\n                {\n                    provide: NGRX_DATA_WEBSOCKET_CONFIG,\n                    useValue: {\n                        ...defaultNgrxDataWebsocketConfig,\n                        ...config,\n                    },\n                },\n            ],\n        };\n    }\n}\n","import {\n    EntityCollectionServiceBase,\n    EntityCollectionServiceElementsFactory,\n} from '@ngrx/data';\nimport type { EntitySelectors$ } from '@ngrx/data/src/selectors/entity-selectors$';\nimport type { Observable } from 'rxjs';\nimport type { SocketEventListener } from '../listeners/socket-event-listener';\nimport type { SocketServiceElementsFactory } from './socket-service-elements.factory';\n\nexport class SocketCollectionServiceBase<\n    T,\n    S$ extends EntitySelectors$<T> = EntitySelectors$<T>\n> extends EntityCollectionServiceBase<T, S$> {\n    private readonly listener: SocketEventListener<T>;\n\n    readonly connected$: Observable<boolean>;\n\n    readonly connecting$: Observable<boolean>;\n\n    constructor(\n        entityName: string,\n        serviceElementsFactory: EntityCollectionServiceElementsFactory,\n        protected socketServiceElementsFactory: SocketServiceElementsFactory<T>\n    ) {\n        super(entityName, serviceElementsFactory);\n\n        const { listener, selectors$ } = socketServiceElementsFactory.create(\n            entityName\n        );\n\n        this.connected$ = selectors$.connected$;\n        this.connecting$ = selectors$.connecting$;\n\n        this.listener = listener;\n    }\n\n    connect(params: any): Observable<boolean> {\n        return this.listener.connect(\n            this.socketServiceElementsFactory.config,\n            params\n        );\n    }\n\n    disconnect(): void {\n        this.listener.disconnect();\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i2.SocketActionFactory","i1","i2.SocketEventListenerCollectionService","i3.SocketActionFactory","i1.SocketActionFactory","i2","i1.SocketDispatcherFactory","i2.SocketEventListenerFactory","i3.SocketDataServiceFactory","i4","i5.SocketEventListenerCollectionService","i6.SocketSelectors$Factory","i2.SocketDispatcherEffects"],"mappings":"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"}