import { Inject, Injectable, Optional } from '@angular/core';
import { createSelector } from '@ngrx/store';
import { ENTITY_CACHE_SELECTOR_TOKEN, createEntityCacheSelector, } from './entity-cache-selector';
import { ENTITY_CACHE_NAME } from '../reducers/constants';
import { EntityCollectionCreator } from '../reducers/entity-collection-creator';
import * as i0 from "@angular/core";
import * as i1 from "../reducers/entity-collection-creator";
/** Creates EntitySelector functions for entity collections. */
export class EntitySelectorsFactory {
    constructor(entityCollectionCreator, selectEntityCache) {
        this.entityCollectionCreator =
            entityCollectionCreator || new EntityCollectionCreator();
        this.selectEntityCache =
            selectEntityCache || createEntityCacheSelector(ENTITY_CACHE_NAME);
    }
    /**
     * Create the NgRx selector from the store root to the named collection,
     * e.g. from Object to Heroes.
     * @param entityName the name of the collection
     */
    createCollectionSelector(entityName) {
        const getCollection = (cache = {}) => ((cache[entityName] ||
            this.entityCollectionCreator.create(entityName)));
        return createSelector(this.selectEntityCache, getCollection);
    }
    // createCollectionSelectors implementation
    createCollectionSelectors(metadataOrName) {
        const metadata = typeof metadataOrName === 'string'
            ? { entityName: metadataOrName }
            : metadataOrName;
        const selectKeys = (c) => c.ids;
        const selectEntityMap = (c) => c.entities;
        const selectEntities = createSelector(selectKeys, selectEntityMap, (keys, entities) => keys.map((key) => entities[key]));
        const selectCount = createSelector(selectKeys, (keys) => keys.length);
        // EntityCollection selectors that go beyond the ngrx/entity/EntityState selectors
        const selectFilter = (c) => c.filter;
        const filterFn = metadata.filterFn;
        const selectFilteredEntities = filterFn
            ? createSelector(selectEntities, selectFilter, (entities, pattern) => filterFn(entities, pattern))
            : selectEntities;
        const selectLoaded = (c) => c.loaded;
        const selectLoading = (c) => c.loading;
        const selectChangeState = (c) => c.changeState;
        // Create collection selectors for each `additionalCollectionState` property.
        // These all extend from `selectCollection`
        const extra = metadata.additionalCollectionState || {};
        const extraSelectors = {};
        Object.keys(extra).forEach((k) => {
            extraSelectors['select' + k[0].toUpperCase() + k.slice(1)] = (c) => c[k];
        });
        return {
            selectCount,
            selectEntities,
            selectEntityMap,
            selectFilter,
            selectFilteredEntities,
            selectKeys,
            selectLoaded,
            selectLoading,
            selectChangeState,
            ...extraSelectors,
        };
    }
    // createCollectionSelectors implementation
    create(metadataOrName) {
        const metadata = typeof metadataOrName === 'string'
            ? { entityName: metadataOrName }
            : metadataOrName;
        const entityName = metadata.entityName;
        const selectCollection = this.createCollectionSelector(entityName);
        const collectionSelectors = this.createCollectionSelectors(metadata);
        const entitySelectors = {};
        Object.keys(collectionSelectors).forEach((k) => {
            entitySelectors[k] = createSelector(selectCollection, collectionSelectors[k]);
        });
        return {
            entityName,
            selectCollection,
            selectEntityCache: this.selectEntityCache,
            ...entitySelectors,
        };
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.0", ngImport: i0, type: EntitySelectorsFactory, deps: [{ token: i1.EntityCollectionCreator, optional: true }, { token: ENTITY_CACHE_SELECTOR_TOKEN, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }
    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.0", ngImport: i0, type: EntitySelectorsFactory }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.0", ngImport: i0, type: EntitySelectorsFactory, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.EntityCollectionCreator, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ENTITY_CACHE_SELECTOR_TOKEN]
                }] }] });
//# sourceMappingURL=data:application/json;base64,